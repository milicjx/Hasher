#!/usr/bin/env python

# $ sudo easy_install pip
# $ sudo pip install ssdeep
# $ sudo pip install prettytable

import os
import sys
import ssdeep
import hashlib
import time
import platform
import argparse
from prettytable import *
from datetime import datetime

__version__ = '0.5'
__date__ = '2016-04-28'
__author__ = 'Jovan'

ap = argparse.ArgumentParser(
	prog = 'Hasher',
	usage = '%(prog)s [-a [algorithm]] [-b [blocksize]] [-s (ssdeep)] (-f file | -d directory | -l list)',
	description = 'Welcome to Hasher\n',
	epilog = 'For more information about Hasher contact Jovan at jmilic1@jhu.edu',
	formatter_class = argparse.ArgumentDefaultsHelpFormatter)

ap.add_argument('-a', nargs = '?', const = 'sha512', default = 'sha512', help = 'Specify cryptographic hash function.')
ap.add_argument('-b', nargs = '?', type = int, const = 65536, default = 65536, help = 'Specify block size in bytes.')
ap.add_argument('-s', nargs = '?', const = 'false', default = 'false', choices = ['true','false'], help = 'Return ssdeep CTPH (fuzzy hash) value.')

arg_group = ap.add_mutually_exclusive_group(required = True)
arg_group.add_argument('-f', help = 'Return hash value for a single file.')
arg_group.add_argument('-d', help = 'Return hash values for files within the directory.')
arg_group.add_argument('-l', help = 'Return hash values for files within the list.')

args = ap.parse_args()

def main():

	hash_name = args.a
	h = hashlib.new(hash_name)

	BLOCKSIZE = args.b

	pathList = []
	hashList = []
	ssdeepList = []

	def file(inFile):

		with open(inFile, 'rb') as afile: #read file as binary via 'rb' to prevent corruption
			buffer = afile.read(BLOCKSIZE)
			while len(buffer) > 0:
				h.update(buffer)
				buffer = afile.read(BLOCKSIZE)

		print os.path.abspath(inFile) + '\t' + '(' + hash_name + ')\t' + h.hexdigest()

		if args.s == 'true':
			print os.path.abspath(inFile) + '\t' + '(ssdeep)\t' + ssdeep.hash_from_file(args.f)

	def directory(inDir):

		dirPath = os.path.abspath(inDir)

		# generate the file names paths in a directory and append to a list
		for (path, dirnames, filenames) in os.walk(dirPath):
			pathList.extend(os.path.join(path, name) for name in filenames)

		bulk_hash(pathList)

		if args.s == 'true':
			bulk_ssdeep(pathList)

	def listing(inList):

		with open(inList, 'rb') as alist:

			for textline in alist:
				line = textline.rstrip("\n")

				# if path is a file, append it to the list
				if os.path.isfile(line):
					pathList.append(os.path.abspath(line))

				# if path is a directory, generate the file names paths in a directory and append to a list
				if os.path.isdir(line):
					for (path, dirnames, filenames) in os.walk(line):
						pathList.extend(os.path.join(path, name) for name in filenames)

			bulk_hash(pathList)

			if args.s == 'true':
				bulk_ssdeep(pathList)

	def bulk_hash(lst = []):

		for path in lst:
			try:

				with open(path, 'rb') as afile:
					buffer = afile.read(BLOCKSIZE)
					while len(buffer) > 0:
						h.update(buffer)
						buffer = afile.read(BLOCKSIZE)

					fileHash = h.hexdigest()

			except IOError as ioe:
				print "Error:\t" + str(ioe)

			hashList.append(fileHash)

	def bulk_ssdeep(lst = []):

		for path in lst:
			try:
			
				fileSsdeep = ssdeep.hash_from_file(path)

			except IOError as ioe:
				print "Error:\t" + str(ioe)

			ssdeepList.append(fileSsdeep)

	def printTable():
		
		x = PrettyTable()
		x.add_column('File Path', pathList)
		x.add_column('Hash Value (' + hash_name + ')', hashList)
		x.align = 'l'
		print x

		if (args.s == 'true'):
			x = PrettyTable()
			x.add_column('File Path', pathList)
			x.add_column('ssdeep Value', ssdeepList)
			x.align = 'l'
			print x

	def getPlatform():

		print 'Generated by Hasher'
		print 'Date / Time:\t' + time.strftime("%d/%m/%Y") + ' / ' + time.strftime("%H:%M:%S %Z")
		print 'Platform:\t' + platform.platform()
		print 'Executed By:\t' + os.getlogin()


	if args.f is not None:
		if os.path.isfile(args.f):
			file(args.f)
			getPlatform()
		else:
			print 'File does not exist'

	elif args.d is not None:
		if os.path.isdir(args.d):
			directory(args.d)
			printTable()
			getPlatform()
		else:
			print 'Directory does not exist'

	else:
		if os.path.isfile(args.l):
			listing(args.l)
			printTable()
			getPlatform()

		else:
			print 'Invalid input argument'

if __name__ == '__main__':
	main()
